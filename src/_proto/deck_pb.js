// source: deck.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.deck.CraftDeck', null, global);
goog.exportSymbol('proto.deck.CupDeck', null, global);
goog.exportSymbol('proto.deck.Deck', null, global);
goog.exportSymbol('proto.deck.DeckList', null, global);
goog.exportSymbol('proto.deck.DeckNo', null, global);
goog.exportSymbol('proto.deck.DeckNumbers', null, global);
goog.exportSymbol('proto.deck.DeckTemplate', null, global);
goog.exportSymbol('proto.deck.DeckTemplateInfo', null, global);
goog.exportSymbol('proto.deck.DeckTemplateNo', null, global);
goog.exportSymbol('proto.deck.DeckTemplateType', null, global);
goog.exportSymbol('proto.deck.DeckTemplates', null, global);
goog.exportSymbol('proto.deck.DeckType', null, global);
goog.exportSymbol('proto.deck.DeckUnit', null, global);
goog.exportSymbol('proto.deck.Decks', null, global);
goog.exportSymbol('proto.deck.Empty', null, global);
goog.exportSymbol('proto.deck.FlagDecks', null, global);
goog.exportSymbol('proto.deck.Gum', null, global);
goog.exportSymbol('proto.deck.HeroIds', null, global);
goog.exportSymbol('proto.deck.MiniDeck', null, global);
goog.exportSymbol('proto.deck.MiniDeckWithUid', null, global);
goog.exportSymbol('proto.deck.MiniDecksWithUid', null, global);
goog.exportSymbol('proto.deck.RatingDuelDefenseDeck', null, global);
goog.exportSymbol('proto.deck.SetGymDeckRequest', null, global);
goog.exportSymbol('proto.deck.SetMyArenaDeckRequest', null, global);
goog.exportSymbol('proto.deck.SetMyDeckRequest', null, global);
goog.exportSymbol('proto.deck.SetMyTemplateRequest', null, global);
goog.exportSymbol('proto.deck.SetRatingDuelDefenseDeckRequest', null, global);
goog.exportSymbol('proto.deck.SetRatingDuelOffenseDeckRequest', null, global);
goog.exportSymbol('proto.deck.SetSoulDeckRequest', null, global);
goog.exportSymbol('proto.deck.SetThreeOnThreeOnThreeDeckRequest', null, global);
goog.exportSymbol('proto.deck.SoulDeck', null, global);
goog.exportSymbol('proto.deck.StaminaRequest', null, global);
goog.exportSymbol('proto.deck.TemplateNumbers', null, global);
goog.exportSymbol('proto.deck.Uid', null, global);
goog.exportSymbol('proto.deck.UidCup', null, global);
goog.exportSymbol('proto.deck.UidsCup', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.Uid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.Uid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.Uid.displayName = 'proto.deck.Uid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckTemplateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.DeckTemplateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckTemplateInfo.displayName = 'proto.deck.DeckTemplateInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.Decks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.Decks.repeatedFields_, null);
};
goog.inherits(proto.deck.Decks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.Decks.displayName = 'proto.deck.Decks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.HeroIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.HeroIds.repeatedFields_, null);
};
goog.inherits(proto.deck.HeroIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.HeroIds.displayName = 'proto.deck.HeroIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.FlagDecks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.FlagDecks.repeatedFields_, null);
};
goog.inherits(proto.deck.FlagDecks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.FlagDecks.displayName = 'proto.deck.FlagDecks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.DeckList.repeatedFields_, null);
};
goog.inherits(proto.deck.DeckList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckList.displayName = 'proto.deck.DeckList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.Deck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.Deck.repeatedFields_, null);
};
goog.inherits(proto.deck.Deck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.Deck.displayName = 'proto.deck.Deck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.CupDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.CupDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.CupDeck.displayName = 'proto.deck.CupDeck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SoulDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SoulDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SoulDeck.displayName = 'proto.deck.SoulDeck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.CraftDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.CraftDeck.repeatedFields_, null);
};
goog.inherits(proto.deck.CraftDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.CraftDeck.displayName = 'proto.deck.CraftDeck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.RatingDuelDefenseDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.RatingDuelDefenseDeck.repeatedFields_, null);
};
goog.inherits(proto.deck.RatingDuelDefenseDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.RatingDuelDefenseDeck.displayName = 'proto.deck.RatingDuelDefenseDeck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckTemplates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.DeckTemplates.repeatedFields_, null);
};
goog.inherits(proto.deck.DeckTemplates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckTemplates.displayName = 'proto.deck.DeckTemplates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.DeckTemplate.repeatedFields_, null);
};
goog.inherits(proto.deck.DeckTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckTemplate.displayName = 'proto.deck.DeckTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.DeckUnit.repeatedFields_, null);
};
goog.inherits(proto.deck.DeckUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckUnit.displayName = 'proto.deck.DeckUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.MiniDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.MiniDeck.repeatedFields_, null);
};
goog.inherits(proto.deck.MiniDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.MiniDeck.displayName = 'proto.deck.MiniDeck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.MiniDeckWithUid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.MiniDeckWithUid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.MiniDeckWithUid.displayName = 'proto.deck.MiniDeckWithUid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.MiniDecksWithUid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.MiniDecksWithUid.repeatedFields_, null);
};
goog.inherits(proto.deck.MiniDecksWithUid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.MiniDecksWithUid.displayName = 'proto.deck.MiniDecksWithUid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetMyDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetMyDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetMyDeckRequest.displayName = 'proto.deck.SetMyDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetGymDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetGymDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetGymDeckRequest.displayName = 'proto.deck.SetGymDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetSoulDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetSoulDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetSoulDeckRequest.displayName = 'proto.deck.SetSoulDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetRatingDuelOffenseDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetRatingDuelOffenseDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetRatingDuelOffenseDeckRequest.displayName = 'proto.deck.SetRatingDuelOffenseDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetRatingDuelDefenseDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetRatingDuelDefenseDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetRatingDuelDefenseDeckRequest.displayName = 'proto.deck.SetRatingDuelDefenseDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetThreeOnThreeOnThreeDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetThreeOnThreeOnThreeDeckRequest.displayName = 'proto.deck.SetThreeOnThreeOnThreeDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetMyArenaDeckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetMyArenaDeckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetMyArenaDeckRequest.displayName = 'proto.deck.SetMyArenaDeckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.SetMyTemplateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.SetMyTemplateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.SetMyTemplateRequest.displayName = 'proto.deck.SetMyTemplateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.StaminaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.StaminaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.StaminaRequest.displayName = 'proto.deck.StaminaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.Gum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.Gum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.Gum.displayName = 'proto.deck.Gum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckTemplateNo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.DeckTemplateNo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckTemplateNo.displayName = 'proto.deck.DeckTemplateNo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.TemplateNumbers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.TemplateNumbers.repeatedFields_, null);
};
goog.inherits(proto.deck.TemplateNumbers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.TemplateNumbers.displayName = 'proto.deck.TemplateNumbers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckNumbers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.DeckNumbers.repeatedFields_, null);
};
goog.inherits(proto.deck.DeckNumbers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckNumbers.displayName = 'proto.deck.DeckNumbers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.UidCup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.UidCup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.UidCup.displayName = 'proto.deck.UidCup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.UidsCup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.deck.UidsCup.repeatedFields_, null);
};
goog.inherits(proto.deck.UidsCup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.UidsCup.displayName = 'proto.deck.UidsCup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.DeckNo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.DeckNo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.DeckNo.displayName = 'proto.deck.DeckNo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.deck.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.deck.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.deck.Empty.displayName = 'proto.deck.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.Uid.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.Uid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.Uid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Uid.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.Uid}
 */
proto.deck.Uid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.Uid;
  return proto.deck.Uid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.Uid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.Uid}
 */
proto.deck.Uid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.Uid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.Uid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.Uid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Uid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 uid = 1;
 * @return {number}
 */
proto.deck.Uid.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.Uid} returns this
 */
proto.deck.Uid.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckTemplateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckTemplateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckTemplateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplateInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    templateTypeExpansionCountMap: (f = msg.getTemplateTypeExpansionCountMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckTemplateInfo}
 */
proto.deck.DeckTemplateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckTemplateInfo;
  return proto.deck.DeckTemplateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckTemplateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckTemplateInfo}
 */
proto.deck.DeckTemplateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = msg.getTemplateTypeExpansionCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckTemplateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckTemplateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckTemplateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTemplateTypeExpansionCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * optional uint32 uid = 1;
 * @return {number}
 */
proto.deck.DeckTemplateInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckTemplateInfo} returns this
 */
proto.deck.DeckTemplateInfo.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<uint32, int32> template_type_expansion_count = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.deck.DeckTemplateInfo.prototype.getTemplateTypeExpansionCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.DeckTemplateInfo} returns this
 */
proto.deck.DeckTemplateInfo.prototype.clearTemplateTypeExpansionCountMap = function() {
  this.getTemplateTypeExpansionCountMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.Decks.repeatedFields_ = [1,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.Decks.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.Decks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.Decks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Decks.toObject = function(includeInstance, msg) {
  var f, obj = {
    decksList: jspb.Message.toObjectList(msg.getDecksList(),
    proto.deck.Deck.toObject, includeInstance),
    cupDeck: (f = msg.getCupDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    knightDeck: (f = msg.getKnightDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    arenaDeck: (f = msg.getArenaDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    nineDeck: (f = msg.getNineDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    arenaNineDeck: (f = msg.getArenaNineDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    arenaDecksMap: (f = msg.getArenaDecksMap()) ? f.toObject(includeInstance, proto.deck.Deck.toObject) : [],
    colosseumOffenseDeck: (f = msg.getColosseumOffenseDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    colosseumDefenseDeck: (f = msg.getColosseumDefenseDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    questSixDeck: (f = msg.getQuestSixDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    colosseumDefenseDecksList: jspb.Message.toObjectList(msg.getColosseumDefenseDecksList(),
    proto.deck.Deck.toObject, includeInstance),
    warDeck: (f = msg.getWarDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    gymDecksMap: (f = msg.getGymDecksMap()) ? f.toObject(includeInstance, proto.deck.DeckList.toObject) : [],
    cupThreeDecksMap: (f = msg.getCupThreeDecksMap()) ? f.toObject(includeInstance, proto.deck.Deck.toObject) : [],
    cupNineDecksMap: (f = msg.getCupNineDecksMap()) ? f.toObject(includeInstance, proto.deck.Deck.toObject) : [],
    soulDecksMap: (f = msg.getSoulDecksMap()) ? f.toObject(includeInstance, proto.deck.Deck.toObject) : [],
    soulBattleDecksMap: (f = msg.getSoulBattleDecksMap()) ? f.toObject(includeInstance, proto.deck.SoulDeck.toObject) : [],
    cupRegimentalDecksMap: (f = msg.getCupRegimentalDecksMap()) ? f.toObject(includeInstance, proto.deck.DeckList.toObject) : [],
    ratingDuelOffenseDecksMap: (f = msg.getRatingDuelOffenseDecksMap()) ? f.toObject(includeInstance, proto.deck.DeckList.toObject) : [],
    ratingDuelDefenseDeckMap: (f = msg.getRatingDuelDefenseDeckMap()) ? f.toObject(includeInstance, proto.deck.RatingDuelDefenseDeck.toObject) : [],
    threeOnThreeOnThreeDecksMap: (f = msg.getThreeOnThreeOnThreeDecksMap()) ? f.toObject(includeInstance, proto.deck.DeckList.toObject) : [],
    raidDeck: (f = msg.getRaidDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    craftDeck: (f = msg.getCraftDeck()) && proto.deck.CraftDeck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.Decks}
 */
proto.deck.Decks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.Decks;
  return proto.deck.Decks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.Decks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.Decks}
 */
proto.deck.Decks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.addDecks(value);
      break;
    case 2:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setCupDeck(value);
      break;
    case 3:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setKnightDeck(value);
      break;
    case 4:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setArenaDeck(value);
      break;
    case 5:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setNineDeck(value);
      break;
    case 6:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setArenaNineDeck(value);
      break;
    case 7:
      var value = msg.getArenaDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.Deck.deserializeBinaryFromReader, 0, new proto.deck.Deck());
         });
      break;
    case 9:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setColosseumOffenseDeck(value);
      break;
    case 10:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setColosseumDefenseDeck(value);
      break;
    case 11:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setQuestSixDeck(value);
      break;
    case 12:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.addColosseumDefenseDecks(value);
      break;
    case 13:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setWarDeck(value);
      break;
    case 14:
      var value = msg.getGymDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.DeckList.deserializeBinaryFromReader, 0, new proto.deck.DeckList());
         });
      break;
    case 15:
      var value = msg.getCupThreeDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.Deck.deserializeBinaryFromReader, 0, new proto.deck.Deck());
         });
      break;
    case 16:
      var value = msg.getCupNineDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.Deck.deserializeBinaryFromReader, 0, new proto.deck.Deck());
         });
      break;
    case 17:
      var value = msg.getSoulDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.Deck.deserializeBinaryFromReader, 0, new proto.deck.Deck());
         });
      break;
    case 18:
      var value = msg.getSoulBattleDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.SoulDeck.deserializeBinaryFromReader, 0, new proto.deck.SoulDeck());
         });
      break;
    case 19:
      var value = msg.getCupRegimentalDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.DeckList.deserializeBinaryFromReader, 0, new proto.deck.DeckList());
         });
      break;
    case 20:
      var value = msg.getRatingDuelOffenseDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.DeckList.deserializeBinaryFromReader, 0, new proto.deck.DeckList());
         });
      break;
    case 21:
      var value = msg.getRatingDuelDefenseDeckMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.RatingDuelDefenseDeck.deserializeBinaryFromReader, 0, new proto.deck.RatingDuelDefenseDeck());
         });
      break;
    case 22:
      var value = msg.getThreeOnThreeOnThreeDecksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.deck.DeckList.deserializeBinaryFromReader, 0, new proto.deck.DeckList());
         });
      break;
    case 23:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setRaidDeck(value);
      break;
    case 24:
      var value = new proto.deck.CraftDeck;
      reader.readMessage(value,proto.deck.CraftDeck.deserializeBinaryFromReader);
      msg.setCraftDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.Decks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.Decks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.Decks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Decks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getCupDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getKnightDeck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getArenaDeck();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getNineDeck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getArenaNineDeck();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getArenaDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.Deck.serializeBinaryToWriter);
  }
  f = message.getColosseumOffenseDeck();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getColosseumDefenseDeck();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getQuestSixDeck();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getColosseumDefenseDecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getWarDeck();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getGymDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.DeckList.serializeBinaryToWriter);
  }
  f = message.getCupThreeDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.Deck.serializeBinaryToWriter);
  }
  f = message.getCupNineDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.Deck.serializeBinaryToWriter);
  }
  f = message.getSoulDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.Deck.serializeBinaryToWriter);
  }
  f = message.getSoulBattleDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.SoulDeck.serializeBinaryToWriter);
  }
  f = message.getCupRegimentalDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(19, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.DeckList.serializeBinaryToWriter);
  }
  f = message.getRatingDuelOffenseDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(20, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.DeckList.serializeBinaryToWriter);
  }
  f = message.getRatingDuelDefenseDeckMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(21, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.RatingDuelDefenseDeck.serializeBinaryToWriter);
  }
  f = message.getThreeOnThreeOnThreeDecksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(22, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.deck.DeckList.serializeBinaryToWriter);
  }
  f = message.getRaidDeck();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getCraftDeck();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.deck.CraftDeck.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Deck decks = 1;
 * @return {!Array<!proto.deck.Deck>}
 */
proto.deck.Decks.prototype.getDecksList = function() {
  return /** @type{!Array<!proto.deck.Deck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.Deck, 1));
};


/**
 * @param {!Array<!proto.deck.Deck>} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setDecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.deck.Deck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.Deck}
 */
proto.deck.Decks.prototype.addDecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.deck.Deck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearDecksList = function() {
  return this.setDecksList([]);
};


/**
 * optional Deck cup_deck = 2;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getCupDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 2));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setCupDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearCupDeck = function() {
  return this.setCupDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasCupDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Deck knight_deck = 3;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getKnightDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 3));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setKnightDeck = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearKnightDeck = function() {
  return this.setKnightDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasKnightDeck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Deck arena_deck = 4;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getArenaDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 4));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setArenaDeck = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearArenaDeck = function() {
  return this.setArenaDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasArenaDeck = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Deck nine_deck = 5;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getNineDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 5));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setNineDeck = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearNineDeck = function() {
  return this.setNineDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasNineDeck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Deck arena_nine_deck = 6;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getArenaNineDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 6));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setArenaNineDeck = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearArenaNineDeck = function() {
  return this.setArenaNineDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasArenaNineDeck = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<uint32, Deck> arena_decks = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.Deck>}
 */
proto.deck.Decks.prototype.getArenaDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.Deck>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.deck.Deck));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearArenaDecksMap = function() {
  this.getArenaDecksMap().clear();
  return this;
};


/**
 * optional Deck colosseum_offense_deck = 9;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getColosseumOffenseDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 9));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setColosseumOffenseDeck = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearColosseumOffenseDeck = function() {
  return this.setColosseumOffenseDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasColosseumOffenseDeck = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Deck colosseum_defense_deck = 10;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getColosseumDefenseDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 10));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setColosseumDefenseDeck = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearColosseumDefenseDeck = function() {
  return this.setColosseumDefenseDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasColosseumDefenseDeck = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Deck quest_six_deck = 11;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getQuestSixDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 11));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setQuestSixDeck = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearQuestSixDeck = function() {
  return this.setQuestSixDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasQuestSixDeck = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated Deck colosseum_defense_decks = 12;
 * @return {!Array<!proto.deck.Deck>}
 */
proto.deck.Decks.prototype.getColosseumDefenseDecksList = function() {
  return /** @type{!Array<!proto.deck.Deck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.Deck, 12));
};


/**
 * @param {!Array<!proto.deck.Deck>} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setColosseumDefenseDecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.deck.Deck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.Deck}
 */
proto.deck.Decks.prototype.addColosseumDefenseDecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.deck.Deck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearColosseumDefenseDecksList = function() {
  return this.setColosseumDefenseDecksList([]);
};


/**
 * optional Deck war_deck = 13;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getWarDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 13));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setWarDeck = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearWarDeck = function() {
  return this.setWarDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasWarDeck = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * map<uint32, DeckList> gym_decks = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.DeckList>}
 */
proto.deck.Decks.prototype.getGymDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.DeckList>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      proto.deck.DeckList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearGymDecksMap = function() {
  this.getGymDecksMap().clear();
  return this;
};


/**
 * map<uint32, Deck> cup_three_decks = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.Deck>}
 */
proto.deck.Decks.prototype.getCupThreeDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.Deck>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      proto.deck.Deck));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearCupThreeDecksMap = function() {
  this.getCupThreeDecksMap().clear();
  return this;
};


/**
 * map<uint32, Deck> cup_nine_decks = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.Deck>}
 */
proto.deck.Decks.prototype.getCupNineDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.Deck>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      proto.deck.Deck));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearCupNineDecksMap = function() {
  this.getCupNineDecksMap().clear();
  return this;
};


/**
 * map<uint32, Deck> soul_decks = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.Deck>}
 */
proto.deck.Decks.prototype.getSoulDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.Deck>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.deck.Deck));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearSoulDecksMap = function() {
  this.getSoulDecksMap().clear();
  return this;
};


/**
 * map<uint32, SoulDeck> soul_battle_decks = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.SoulDeck>}
 */
proto.deck.Decks.prototype.getSoulBattleDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.SoulDeck>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      proto.deck.SoulDeck));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearSoulBattleDecksMap = function() {
  this.getSoulBattleDecksMap().clear();
  return this;
};


/**
 * map<uint32, DeckList> cup_regimental_decks = 19;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.DeckList>}
 */
proto.deck.Decks.prototype.getCupRegimentalDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.DeckList>} */ (
      jspb.Message.getMapField(this, 19, opt_noLazyCreate,
      proto.deck.DeckList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearCupRegimentalDecksMap = function() {
  this.getCupRegimentalDecksMap().clear();
  return this;
};


/**
 * map<uint32, DeckList> rating_duel_offense_decks = 20;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.DeckList>}
 */
proto.deck.Decks.prototype.getRatingDuelOffenseDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.DeckList>} */ (
      jspb.Message.getMapField(this, 20, opt_noLazyCreate,
      proto.deck.DeckList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearRatingDuelOffenseDecksMap = function() {
  this.getRatingDuelOffenseDecksMap().clear();
  return this;
};


/**
 * map<uint32, RatingDuelDefenseDeck> rating_duel_defense_deck = 21;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.RatingDuelDefenseDeck>}
 */
proto.deck.Decks.prototype.getRatingDuelDefenseDeckMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.RatingDuelDefenseDeck>} */ (
      jspb.Message.getMapField(this, 21, opt_noLazyCreate,
      proto.deck.RatingDuelDefenseDeck));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearRatingDuelDefenseDeckMap = function() {
  this.getRatingDuelDefenseDeckMap().clear();
  return this;
};


/**
 * map<uint32, DeckList> three_on_three_on_three_decks = 22;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.deck.DeckList>}
 */
proto.deck.Decks.prototype.getThreeOnThreeOnThreeDecksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.deck.DeckList>} */ (
      jspb.Message.getMapField(this, 22, opt_noLazyCreate,
      proto.deck.DeckList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearThreeOnThreeOnThreeDecksMap = function() {
  this.getThreeOnThreeOnThreeDecksMap().clear();
  return this;
};


/**
 * optional Deck raid_deck = 23;
 * @return {?proto.deck.Deck}
 */
proto.deck.Decks.prototype.getRaidDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 23));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setRaidDeck = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearRaidDeck = function() {
  return this.setRaidDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasRaidDeck = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional CraftDeck craft_deck = 24;
 * @return {?proto.deck.CraftDeck}
 */
proto.deck.Decks.prototype.getCraftDeck = function() {
  return /** @type{?proto.deck.CraftDeck} */ (
    jspb.Message.getWrapperField(this, proto.deck.CraftDeck, 24));
};


/**
 * @param {?proto.deck.CraftDeck|undefined} value
 * @return {!proto.deck.Decks} returns this
*/
proto.deck.Decks.prototype.setCraftDeck = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.Decks} returns this
 */
proto.deck.Decks.prototype.clearCraftDeck = function() {
  return this.setCraftDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.Decks.prototype.hasCraftDeck = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.HeroIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.HeroIds.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.HeroIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.HeroIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.HeroIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    heroIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.HeroIds}
 */
proto.deck.HeroIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.HeroIds;
  return proto.deck.HeroIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.HeroIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.HeroIds}
 */
proto.deck.HeroIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHeroIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.HeroIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.HeroIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.HeroIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.HeroIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeroIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 hero_ids = 1;
 * @return {!Array<number>}
 */
proto.deck.HeroIds.prototype.getHeroIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.HeroIds} returns this
 */
proto.deck.HeroIds.prototype.setHeroIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.HeroIds} returns this
 */
proto.deck.HeroIds.prototype.addHeroIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.HeroIds} returns this
 */
proto.deck.HeroIds.prototype.clearHeroIdsList = function() {
  return this.setHeroIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.FlagDecks.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.FlagDecks.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.FlagDecks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.FlagDecks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.FlagDecks.toObject = function(includeInstance, msg) {
  var f, obj = {
    uidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    decksList: jspb.Message.toObjectList(msg.getDecksList(),
    proto.deck.Deck.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.FlagDecks}
 */
proto.deck.FlagDecks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.FlagDecks;
  return proto.deck.FlagDecks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.FlagDecks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.FlagDecks}
 */
proto.deck.FlagDecks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUids(values[i]);
      }
      break;
    case 2:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.addDecks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.FlagDecks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.FlagDecks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.FlagDecks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.FlagDecks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getDecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 uids = 1;
 * @return {!Array<number>}
 */
proto.deck.FlagDecks.prototype.getUidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.FlagDecks} returns this
 */
proto.deck.FlagDecks.prototype.setUidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.FlagDecks} returns this
 */
proto.deck.FlagDecks.prototype.addUids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.FlagDecks} returns this
 */
proto.deck.FlagDecks.prototype.clearUidsList = function() {
  return this.setUidsList([]);
};


/**
 * repeated Deck decks = 2;
 * @return {!Array<!proto.deck.Deck>}
 */
proto.deck.FlagDecks.prototype.getDecksList = function() {
  return /** @type{!Array<!proto.deck.Deck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.Deck, 2));
};


/**
 * @param {!Array<!proto.deck.Deck>} value
 * @return {!proto.deck.FlagDecks} returns this
*/
proto.deck.FlagDecks.prototype.setDecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.deck.Deck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.Deck}
 */
proto.deck.FlagDecks.prototype.addDecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.deck.Deck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.FlagDecks} returns this
 */
proto.deck.FlagDecks.prototype.clearDecksList = function() {
  return this.setDecksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.DeckList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckList.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckList.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckListList: jspb.Message.toObjectList(msg.getDeckListList(),
    proto.deck.Deck.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckList}
 */
proto.deck.DeckList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckList;
  return proto.deck.DeckList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckList}
 */
proto.deck.DeckList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.addDeckList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Deck deck_list = 1;
 * @return {!Array<!proto.deck.Deck>}
 */
proto.deck.DeckList.prototype.getDeckListList = function() {
  return /** @type{!Array<!proto.deck.Deck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.Deck, 1));
};


/**
 * @param {!Array<!proto.deck.Deck>} value
 * @return {!proto.deck.DeckList} returns this
*/
proto.deck.DeckList.prototype.setDeckListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.deck.Deck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.Deck}
 */
proto.deck.DeckList.prototype.addDeckList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.deck.Deck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckList} returns this
 */
proto.deck.DeckList.prototype.clearDeckListList = function() {
  return this.setDeckListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.Deck.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.Deck.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.Deck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.Deck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Deck.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.deck.DeckUnit.toObject, includeInstance),
    jinId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    jinIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.Deck}
 */
proto.deck.Deck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.Deck;
  return proto.deck.Deck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.Deck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.Deck}
 */
proto.deck.Deck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.DeckUnit;
      reader.readMessage(value,proto.deck.DeckUnit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJinId(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJinIds(values[i]);
      }
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.Deck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.Deck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.Deck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Deck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.deck.DeckUnit.serializeBinaryToWriter
    );
  }
  f = message.getJinId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getJinIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated DeckUnit units = 1;
 * @return {!Array<!proto.deck.DeckUnit>}
 */
proto.deck.Deck.prototype.getUnitsList = function() {
  return /** @type{!Array<!proto.deck.DeckUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.DeckUnit, 1));
};


/**
 * @param {!Array<!proto.deck.DeckUnit>} value
 * @return {!proto.deck.Deck} returns this
*/
proto.deck.Deck.prototype.setUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.deck.DeckUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckUnit}
 */
proto.deck.Deck.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.deck.DeckUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.Deck} returns this
 */
proto.deck.Deck.prototype.clearUnitsList = function() {
  return this.setUnitsList([]);
};


/**
 * optional uint32 jin_id = 2;
 * @return {number}
 */
proto.deck.Deck.prototype.getJinId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.Deck} returns this
 */
proto.deck.Deck.prototype.setJinId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint32 jin_ids = 3;
 * @return {!Array<number>}
 */
proto.deck.Deck.prototype.getJinIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.Deck} returns this
 */
proto.deck.Deck.prototype.setJinIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.Deck} returns this
 */
proto.deck.Deck.prototype.addJinIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.Deck} returns this
 */
proto.deck.Deck.prototype.clearJinIdsList = function() {
  return this.setJinIdsList([]);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.deck.Deck.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.deck.Deck} returns this
 */
proto.deck.Deck.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.CupDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.CupDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.CupDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.CupDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    cupId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.CupDeck}
 */
proto.deck.CupDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.CupDeck;
  return proto.deck.CupDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.CupDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.CupDeck}
 */
proto.deck.CupDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.CupDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.CupDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.CupDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.CupDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Deck deck = 1;
 * @return {?proto.deck.Deck}
 */
proto.deck.CupDeck.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 1));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.CupDeck} returns this
*/
proto.deck.CupDeck.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.CupDeck} returns this
 */
proto.deck.CupDeck.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.CupDeck.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cup_id = 2;
 * @return {number}
 */
proto.deck.CupDeck.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.CupDeck} returns this
 */
proto.deck.CupDeck.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SoulDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SoulDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SoulDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SoulDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    soulId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SoulDeck}
 */
proto.deck.SoulDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SoulDeck;
  return proto.deck.SoulDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SoulDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SoulDeck}
 */
proto.deck.SoulDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSoulId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SoulDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SoulDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SoulDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SoulDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getSoulId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Deck deck = 1;
 * @return {?proto.deck.Deck}
 */
proto.deck.SoulDeck.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 1));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SoulDeck} returns this
*/
proto.deck.SoulDeck.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SoulDeck} returns this
 */
proto.deck.SoulDeck.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SoulDeck.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 soul_id = 2;
 * @return {number}
 */
proto.deck.SoulDeck.prototype.getSoulId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SoulDeck} returns this
 */
proto.deck.SoulDeck.prototype.setSoulId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.CraftDeck.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.CraftDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.CraftDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.CraftDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.CraftDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    heroIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.CraftDeck}
 */
proto.deck.CraftDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.CraftDeck;
  return proto.deck.CraftDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.CraftDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.CraftDeck}
 */
proto.deck.CraftDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHeroIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.CraftDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.CraftDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.CraftDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.CraftDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeroIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 hero_ids = 1;
 * @return {!Array<number>}
 */
proto.deck.CraftDeck.prototype.getHeroIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.CraftDeck} returns this
 */
proto.deck.CraftDeck.prototype.setHeroIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.CraftDeck} returns this
 */
proto.deck.CraftDeck.prototype.addHeroIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.CraftDeck} returns this
 */
proto.deck.CraftDeck.prototype.clearHeroIdsList = function() {
  return this.setHeroIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.RatingDuelDefenseDeck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.RatingDuelDefenseDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.RatingDuelDefenseDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.RatingDuelDefenseDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.RatingDuelDefenseDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    hiddenUnitIndexesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.RatingDuelDefenseDeck}
 */
proto.deck.RatingDuelDefenseDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.RatingDuelDefenseDeck;
  return proto.deck.RatingDuelDefenseDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.RatingDuelDefenseDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.RatingDuelDefenseDeck}
 */
proto.deck.RatingDuelDefenseDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHiddenUnitIndexes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.RatingDuelDefenseDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.RatingDuelDefenseDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.RatingDuelDefenseDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.RatingDuelDefenseDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getHiddenUnitIndexesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional Deck deck = 1;
 * @return {?proto.deck.Deck}
 */
proto.deck.RatingDuelDefenseDeck.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 1));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.RatingDuelDefenseDeck} returns this
*/
proto.deck.RatingDuelDefenseDeck.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.RatingDuelDefenseDeck} returns this
 */
proto.deck.RatingDuelDefenseDeck.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.RatingDuelDefenseDeck.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 hidden_unit_indexes = 2;
 * @return {!Array<number>}
 */
proto.deck.RatingDuelDefenseDeck.prototype.getHiddenUnitIndexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.RatingDuelDefenseDeck} returns this
 */
proto.deck.RatingDuelDefenseDeck.prototype.setHiddenUnitIndexesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.RatingDuelDefenseDeck} returns this
 */
proto.deck.RatingDuelDefenseDeck.prototype.addHiddenUnitIndexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.RatingDuelDefenseDeck} returns this
 */
proto.deck.RatingDuelDefenseDeck.prototype.clearHiddenUnitIndexesList = function() {
  return this.setHiddenUnitIndexesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.DeckTemplates.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckTemplates.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckTemplates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckTemplates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplates.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckTemplatesList: jspb.Message.toObjectList(msg.getDeckTemplatesList(),
    proto.deck.DeckTemplate.toObject, includeInstance),
    questDeckTemplatesList: jspb.Message.toObjectList(msg.getQuestDeckTemplatesList(),
    proto.deck.DeckTemplate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckTemplates}
 */
proto.deck.DeckTemplates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckTemplates;
  return proto.deck.DeckTemplates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckTemplates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckTemplates}
 */
proto.deck.DeckTemplates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.DeckTemplate;
      reader.readMessage(value,proto.deck.DeckTemplate.deserializeBinaryFromReader);
      msg.addDeckTemplates(value);
      break;
    case 2:
      var value = new proto.deck.DeckTemplate;
      reader.readMessage(value,proto.deck.DeckTemplate.deserializeBinaryFromReader);
      msg.addQuestDeckTemplates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckTemplates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckTemplates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckTemplates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckTemplatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.deck.DeckTemplate.serializeBinaryToWriter
    );
  }
  f = message.getQuestDeckTemplatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.deck.DeckTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeckTemplate deck_templates = 1;
 * @return {!Array<!proto.deck.DeckTemplate>}
 */
proto.deck.DeckTemplates.prototype.getDeckTemplatesList = function() {
  return /** @type{!Array<!proto.deck.DeckTemplate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.DeckTemplate, 1));
};


/**
 * @param {!Array<!proto.deck.DeckTemplate>} value
 * @return {!proto.deck.DeckTemplates} returns this
*/
proto.deck.DeckTemplates.prototype.setDeckTemplatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.deck.DeckTemplate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckTemplate}
 */
proto.deck.DeckTemplates.prototype.addDeckTemplates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.deck.DeckTemplate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckTemplates} returns this
 */
proto.deck.DeckTemplates.prototype.clearDeckTemplatesList = function() {
  return this.setDeckTemplatesList([]);
};


/**
 * repeated DeckTemplate quest_deck_templates = 2;
 * @return {!Array<!proto.deck.DeckTemplate>}
 */
proto.deck.DeckTemplates.prototype.getQuestDeckTemplatesList = function() {
  return /** @type{!Array<!proto.deck.DeckTemplate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.DeckTemplate, 2));
};


/**
 * @param {!Array<!proto.deck.DeckTemplate>} value
 * @return {!proto.deck.DeckTemplates} returns this
*/
proto.deck.DeckTemplates.prototype.setQuestDeckTemplatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.deck.DeckTemplate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckTemplate}
 */
proto.deck.DeckTemplates.prototype.addQuestDeckTemplates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.deck.DeckTemplate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckTemplates} returns this
 */
proto.deck.DeckTemplates.prototype.clearQuestDeckTemplatesList = function() {
  return this.setQuestDeckTemplatesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.DeckTemplate.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.deck.DeckUnit.toObject, includeInstance),
    jinId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    jinIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckTemplate}
 */
proto.deck.DeckTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckTemplate;
  return proto.deck.DeckTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckTemplate}
 */
proto.deck.DeckTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.DeckUnit;
      reader.readMessage(value,proto.deck.DeckUnit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJinId(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJinIds(values[i]);
      }
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.deck.DeckUnit.serializeBinaryToWriter
    );
  }
  f = message.getJinId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getJinIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated DeckUnit units = 1;
 * @return {!Array<!proto.deck.DeckUnit>}
 */
proto.deck.DeckTemplate.prototype.getUnitsList = function() {
  return /** @type{!Array<!proto.deck.DeckUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.DeckUnit, 1));
};


/**
 * @param {!Array<!proto.deck.DeckUnit>} value
 * @return {!proto.deck.DeckTemplate} returns this
*/
proto.deck.DeckTemplate.prototype.setUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.deck.DeckUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckUnit}
 */
proto.deck.DeckTemplate.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.deck.DeckUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckTemplate} returns this
 */
proto.deck.DeckTemplate.prototype.clearUnitsList = function() {
  return this.setUnitsList([]);
};


/**
 * optional uint32 jin_id = 2;
 * @return {number}
 */
proto.deck.DeckTemplate.prototype.getJinId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckTemplate} returns this
 */
proto.deck.DeckTemplate.prototype.setJinId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint32 jin_ids = 3;
 * @return {!Array<number>}
 */
proto.deck.DeckTemplate.prototype.getJinIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.DeckTemplate} returns this
 */
proto.deck.DeckTemplate.prototype.setJinIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckTemplate} returns this
 */
proto.deck.DeckTemplate.prototype.addJinIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckTemplate} returns this
 */
proto.deck.DeckTemplate.prototype.clearJinIdsList = function() {
  return this.setJinIdsList([]);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.deck.DeckTemplate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.deck.DeckTemplate} returns this
 */
proto.deck.DeckTemplate.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.DeckUnit.repeatedFields_ = [2,3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    heroId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    extensionIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    skillOrdersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    heroActiveIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeAurasList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    activeSkill: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckUnit}
 */
proto.deck.DeckUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckUnit;
  return proto.deck.DeckUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckUnit}
 */
proto.deck.DeckUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeroId(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addExtensionIds(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSkillOrders(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeroActiveIndex(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActiveAuras(values[i]);
      }
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveSkill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeroId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getExtensionIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getSkillOrdersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getHeroActiveIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getActiveAurasList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getActiveSkill();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 hero_id = 1;
 * @return {number}
 */
proto.deck.DeckUnit.prototype.getHeroId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.setHeroId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint32 extension_ids = 2;
 * @return {!Array<number>}
 */
proto.deck.DeckUnit.prototype.getExtensionIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.setExtensionIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.addExtensionIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.clearExtensionIdsList = function() {
  return this.setExtensionIdsList([]);
};


/**
 * repeated int32 skill_orders = 3;
 * @return {!Array<number>}
 */
proto.deck.DeckUnit.prototype.getSkillOrdersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.setSkillOrdersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.addSkillOrders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.clearSkillOrdersList = function() {
  return this.setSkillOrdersList([]);
};


/**
 * optional int32 hero_active_index = 4;
 * @return {number}
 */
proto.deck.DeckUnit.prototype.getHeroActiveIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.setHeroActiveIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated uint32 active_auras = 5;
 * @return {!Array<number>}
 */
proto.deck.DeckUnit.prototype.getActiveAurasList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.setActiveAurasList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.addActiveAuras = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.clearActiveAurasList = function() {
  return this.setActiveAurasList([]);
};


/**
 * optional uint32 active_skill = 6;
 * @return {number}
 */
proto.deck.DeckUnit.prototype.getActiveSkill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckUnit} returns this
 */
proto.deck.DeckUnit.prototype.setActiveSkill = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.MiniDeck.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.MiniDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.MiniDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.MiniDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.MiniDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    heroIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    jinId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    jinIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.MiniDeck}
 */
proto.deck.MiniDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.MiniDeck;
  return proto.deck.MiniDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.MiniDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.MiniDeck}
 */
proto.deck.MiniDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHeroIds(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJinId(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJinIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.MiniDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.MiniDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.MiniDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.MiniDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeroIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getJinId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getJinIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 hero_ids = 1;
 * @return {!Array<number>}
 */
proto.deck.MiniDeck.prototype.getHeroIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.setHeroIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.addHeroIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.clearHeroIdsList = function() {
  return this.setHeroIdsList([]);
};


/**
 * optional uint32 jin_id = 2;
 * @return {number}
 */
proto.deck.MiniDeck.prototype.getJinId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.setJinId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint32 jin_ids = 3;
 * @return {!Array<number>}
 */
proto.deck.MiniDeck.prototype.getJinIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.setJinIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.addJinIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.MiniDeck} returns this
 */
proto.deck.MiniDeck.prototype.clearJinIdsList = function() {
  return this.setJinIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.MiniDeckWithUid.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.MiniDeckWithUid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.MiniDeckWithUid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.MiniDeckWithUid.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deck: (f = msg.getDeck()) && proto.deck.MiniDeck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.MiniDeckWithUid}
 */
proto.deck.MiniDeckWithUid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.MiniDeckWithUid;
  return proto.deck.MiniDeckWithUid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.MiniDeckWithUid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.MiniDeckWithUid}
 */
proto.deck.MiniDeckWithUid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.deck.MiniDeck;
      reader.readMessage(value,proto.deck.MiniDeck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.MiniDeckWithUid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.MiniDeckWithUid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.MiniDeckWithUid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.MiniDeckWithUid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.MiniDeck.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 uid = 1;
 * @return {number}
 */
proto.deck.MiniDeckWithUid.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.MiniDeckWithUid} returns this
 */
proto.deck.MiniDeckWithUid.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MiniDeck deck = 2;
 * @return {?proto.deck.MiniDeck}
 */
proto.deck.MiniDeckWithUid.prototype.getDeck = function() {
  return /** @type{?proto.deck.MiniDeck} */ (
    jspb.Message.getWrapperField(this, proto.deck.MiniDeck, 2));
};


/**
 * @param {?proto.deck.MiniDeck|undefined} value
 * @return {!proto.deck.MiniDeckWithUid} returns this
*/
proto.deck.MiniDeckWithUid.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.MiniDeckWithUid} returns this
 */
proto.deck.MiniDeckWithUid.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.MiniDeckWithUid.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.MiniDecksWithUid.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.MiniDecksWithUid.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.MiniDecksWithUid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.MiniDecksWithUid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.MiniDecksWithUid.toObject = function(includeInstance, msg) {
  var f, obj = {
    decksList: jspb.Message.toObjectList(msg.getDecksList(),
    proto.deck.MiniDeckWithUid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.MiniDecksWithUid}
 */
proto.deck.MiniDecksWithUid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.MiniDecksWithUid;
  return proto.deck.MiniDecksWithUid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.MiniDecksWithUid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.MiniDecksWithUid}
 */
proto.deck.MiniDecksWithUid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.deck.MiniDeckWithUid;
      reader.readMessage(value,proto.deck.MiniDeckWithUid.deserializeBinaryFromReader);
      msg.addDecks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.MiniDecksWithUid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.MiniDecksWithUid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.MiniDecksWithUid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.MiniDecksWithUid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.deck.MiniDeckWithUid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MiniDeckWithUid decks = 1;
 * @return {!Array<!proto.deck.MiniDeckWithUid>}
 */
proto.deck.MiniDecksWithUid.prototype.getDecksList = function() {
  return /** @type{!Array<!proto.deck.MiniDeckWithUid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.deck.MiniDeckWithUid, 1));
};


/**
 * @param {!Array<!proto.deck.MiniDeckWithUid>} value
 * @return {!proto.deck.MiniDecksWithUid} returns this
*/
proto.deck.MiniDecksWithUid.prototype.setDecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.deck.MiniDeckWithUid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.deck.MiniDeckWithUid}
 */
proto.deck.MiniDecksWithUid.prototype.addDecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.deck.MiniDeckWithUid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.MiniDecksWithUid} returns this
 */
proto.deck.MiniDecksWithUid.prototype.clearDecksList = function() {
  return this.setDecksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetMyDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetMyDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetMyDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetMyDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckNo: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetMyDeckRequest}
 */
proto.deck.SetMyDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetMyDeckRequest;
  return proto.deck.SetMyDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetMyDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetMyDeckRequest}
 */
proto.deck.SetMyDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 2:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetMyDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetMyDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetMyDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetMyDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 deck_no = 1;
 * @return {number}
 */
proto.deck.SetMyDeckRequest.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetMyDeckRequest} returns this
 */
proto.deck.SetMyDeckRequest.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Deck deck = 2;
 * @return {?proto.deck.Deck}
 */
proto.deck.SetMyDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 2));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SetMyDeckRequest} returns this
*/
proto.deck.SetMyDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetMyDeckRequest} returns this
 */
proto.deck.SetMyDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetMyDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetGymDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetGymDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetGymDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetGymDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gymId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetGymDeckRequest}
 */
proto.deck.SetGymDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetGymDeckRequest;
  return proto.deck.SetGymDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetGymDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetGymDeckRequest}
 */
proto.deck.SetGymDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGymId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 3:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetGymDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetGymDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetGymDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetGymDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGymId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 gym_id = 1;
 * @return {number}
 */
proto.deck.SetGymDeckRequest.prototype.getGymId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetGymDeckRequest} returns this
 */
proto.deck.SetGymDeckRequest.prototype.setGymId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deck_no = 2;
 * @return {number}
 */
proto.deck.SetGymDeckRequest.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetGymDeckRequest} returns this
 */
proto.deck.SetGymDeckRequest.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Deck deck = 3;
 * @return {?proto.deck.Deck}
 */
proto.deck.SetGymDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 3));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SetGymDeckRequest} returns this
*/
proto.deck.SetGymDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetGymDeckRequest} returns this
 */
proto.deck.SetGymDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetGymDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetSoulDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetSoulDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetSoulDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetSoulDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    soulId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f),
    deckNo: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetSoulDeckRequest}
 */
proto.deck.SetSoulDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetSoulDeckRequest;
  return proto.deck.SetSoulDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetSoulDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetSoulDeckRequest}
 */
proto.deck.SetSoulDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSoulId(value);
      break;
    case 2:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeckNo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetSoulDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetSoulDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetSoulDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetSoulDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoulId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 soul_id = 1;
 * @return {number}
 */
proto.deck.SetSoulDeckRequest.prototype.getSoulId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetSoulDeckRequest} returns this
 */
proto.deck.SetSoulDeckRequest.prototype.setSoulId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Deck deck = 2;
 * @return {?proto.deck.Deck}
 */
proto.deck.SetSoulDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 2));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SetSoulDeckRequest} returns this
*/
proto.deck.SetSoulDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetSoulDeckRequest} returns this
 */
proto.deck.SetSoulDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetSoulDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 deck_no = 3;
 * @return {number}
 */
proto.deck.SetSoulDeckRequest.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetSoulDeckRequest} returns this
 */
proto.deck.SetSoulDeckRequest.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetRatingDuelOffenseDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetRatingDuelOffenseDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetRatingDuelOffenseDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetRatingDuelOffenseDeckRequest}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetRatingDuelOffenseDeckRequest;
  return proto.deck.SetRatingDuelOffenseDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetRatingDuelOffenseDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetRatingDuelOffenseDeckRequest}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 3:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetRatingDuelOffenseDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetRatingDuelOffenseDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetRatingDuelOffenseDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 cup_id = 1;
 * @return {number}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetRatingDuelOffenseDeckRequest} returns this
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deck_no = 2;
 * @return {number}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetRatingDuelOffenseDeckRequest} returns this
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Deck deck = 3;
 * @return {?proto.deck.Deck}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 3));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SetRatingDuelOffenseDeckRequest} returns this
*/
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetRatingDuelOffenseDeckRequest} returns this
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetRatingDuelOffenseDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetRatingDuelDefenseDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetRatingDuelDefenseDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetRatingDuelDefenseDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deck: (f = msg.getDeck()) && proto.deck.RatingDuelDefenseDeck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetRatingDuelDefenseDeckRequest}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetRatingDuelDefenseDeckRequest;
  return proto.deck.SetRatingDuelDefenseDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetRatingDuelDefenseDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetRatingDuelDefenseDeckRequest}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    case 2:
      var value = new proto.deck.RatingDuelDefenseDeck;
      reader.readMessage(value,proto.deck.RatingDuelDefenseDeck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetRatingDuelDefenseDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetRatingDuelDefenseDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetRatingDuelDefenseDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.RatingDuelDefenseDeck.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 cup_id = 1;
 * @return {number}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetRatingDuelDefenseDeckRequest} returns this
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional RatingDuelDefenseDeck deck = 2;
 * @return {?proto.deck.RatingDuelDefenseDeck}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.RatingDuelDefenseDeck} */ (
    jspb.Message.getWrapperField(this, proto.deck.RatingDuelDefenseDeck, 2));
};


/**
 * @param {?proto.deck.RatingDuelDefenseDeck|undefined} value
 * @return {!proto.deck.SetRatingDuelDefenseDeckRequest} returns this
*/
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetRatingDuelDefenseDeckRequest} returns this
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetRatingDuelDefenseDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetThreeOnThreeOnThreeDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetThreeOnThreeOnThreeDeckRequest}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetThreeOnThreeOnThreeDeckRequest;
  return proto.deck.SetThreeOnThreeOnThreeDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetThreeOnThreeOnThreeDeckRequest}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 3:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetThreeOnThreeOnThreeDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 cup_id = 1;
 * @return {number}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} returns this
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deck_no = 2;
 * @return {number}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} returns this
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Deck deck = 3;
 * @return {?proto.deck.Deck}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 3));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} returns this
*/
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetThreeOnThreeOnThreeDeckRequest} returns this
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetThreeOnThreeOnThreeDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetMyArenaDeckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetMyArenaDeckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetMyArenaDeckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetMyArenaDeckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    arenaId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deck: (f = msg.getDeck()) && proto.deck.Deck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetMyArenaDeckRequest}
 */
proto.deck.SetMyArenaDeckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetMyArenaDeckRequest;
  return proto.deck.SetMyArenaDeckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetMyArenaDeckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetMyArenaDeckRequest}
 */
proto.deck.SetMyArenaDeckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArenaId(value);
      break;
    case 2:
      var value = new proto.deck.Deck;
      reader.readMessage(value,proto.deck.Deck.deserializeBinaryFromReader);
      msg.setDeck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetMyArenaDeckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetMyArenaDeckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetMyArenaDeckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetMyArenaDeckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArenaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.Deck.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 arena_id = 1;
 * @return {number}
 */
proto.deck.SetMyArenaDeckRequest.prototype.getArenaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetMyArenaDeckRequest} returns this
 */
proto.deck.SetMyArenaDeckRequest.prototype.setArenaId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Deck deck = 2;
 * @return {?proto.deck.Deck}
 */
proto.deck.SetMyArenaDeckRequest.prototype.getDeck = function() {
  return /** @type{?proto.deck.Deck} */ (
    jspb.Message.getWrapperField(this, proto.deck.Deck, 2));
};


/**
 * @param {?proto.deck.Deck|undefined} value
 * @return {!proto.deck.SetMyArenaDeckRequest} returns this
*/
proto.deck.SetMyArenaDeckRequest.prototype.setDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetMyArenaDeckRequest} returns this
 */
proto.deck.SetMyArenaDeckRequest.prototype.clearDeck = function() {
  return this.setDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetMyArenaDeckRequest.prototype.hasDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.SetMyTemplateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.SetMyTemplateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.SetMyTemplateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetMyTemplateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckTemplateNo: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckTemplate: (f = msg.getDeckTemplate()) && proto.deck.DeckTemplate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.SetMyTemplateRequest}
 */
proto.deck.SetMyTemplateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.SetMyTemplateRequest;
  return proto.deck.SetMyTemplateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.SetMyTemplateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.SetMyTemplateRequest}
 */
proto.deck.SetMyTemplateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckTemplateNo(value);
      break;
    case 2:
      var value = new proto.deck.DeckTemplate;
      reader.readMessage(value,proto.deck.DeckTemplate.deserializeBinaryFromReader);
      msg.setDeckTemplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.SetMyTemplateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.SetMyTemplateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.SetMyTemplateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.SetMyTemplateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckTemplateNo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeckTemplate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.deck.DeckTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 deck_template_no = 1;
 * @return {number}
 */
proto.deck.SetMyTemplateRequest.prototype.getDeckTemplateNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.SetMyTemplateRequest} returns this
 */
proto.deck.SetMyTemplateRequest.prototype.setDeckTemplateNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional DeckTemplate deck_template = 2;
 * @return {?proto.deck.DeckTemplate}
 */
proto.deck.SetMyTemplateRequest.prototype.getDeckTemplate = function() {
  return /** @type{?proto.deck.DeckTemplate} */ (
    jspb.Message.getWrapperField(this, proto.deck.DeckTemplate, 2));
};


/**
 * @param {?proto.deck.DeckTemplate|undefined} value
 * @return {!proto.deck.SetMyTemplateRequest} returns this
*/
proto.deck.SetMyTemplateRequest.prototype.setDeckTemplate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.deck.SetMyTemplateRequest} returns this
 */
proto.deck.SetMyTemplateRequest.prototype.clearDeckTemplate = function() {
  return this.setDeckTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.deck.SetMyTemplateRequest.prototype.hasDeckTemplate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.StaminaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.StaminaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.StaminaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.StaminaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckNo: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stamina: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deckType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.StaminaRequest}
 */
proto.deck.StaminaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.StaminaRequest;
  return proto.deck.StaminaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.StaminaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.StaminaRequest}
 */
proto.deck.StaminaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStamina(value);
      break;
    case 3:
      var value = /** @type {!proto.deck.DeckType} */ (reader.readEnum());
      msg.setDeckType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.StaminaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.StaminaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.StaminaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.StaminaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStamina();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDeckType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 deck_no = 1;
 * @return {number}
 */
proto.deck.StaminaRequest.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.StaminaRequest} returns this
 */
proto.deck.StaminaRequest.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 stamina = 2;
 * @return {number}
 */
proto.deck.StaminaRequest.prototype.getStamina = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.StaminaRequest} returns this
 */
proto.deck.StaminaRequest.prototype.setStamina = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional DeckType deck_type = 3;
 * @return {!proto.deck.DeckType}
 */
proto.deck.StaminaRequest.prototype.getDeckType = function() {
  return /** @type {!proto.deck.DeckType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.deck.DeckType} value
 * @return {!proto.deck.StaminaRequest} returns this
 */
proto.deck.StaminaRequest.prototype.setDeckType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.Gum.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.Gum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.Gum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Gum.toObject = function(includeInstance, msg) {
  var f, obj = {
    gum: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.Gum}
 */
proto.deck.Gum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.Gum;
  return proto.deck.Gum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.Gum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.Gum}
 */
proto.deck.Gum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.Gum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.Gum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.Gum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Gum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGum();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 gum = 1;
 * @return {number}
 */
proto.deck.Gum.prototype.getGum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.Gum} returns this
 */
proto.deck.Gum.prototype.setGum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckTemplateNo.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckTemplateNo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckTemplateNo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplateNo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckTemplateNo: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckTemplateNo}
 */
proto.deck.DeckTemplateNo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckTemplateNo;
  return proto.deck.DeckTemplateNo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckTemplateNo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckTemplateNo}
 */
proto.deck.DeckTemplateNo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckTemplateNo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckTemplateNo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckTemplateNo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckTemplateNo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckTemplateNo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckTemplateNo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 deck_template_no = 1;
 * @return {number}
 */
proto.deck.DeckTemplateNo.prototype.getDeckTemplateNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckTemplateNo} returns this
 */
proto.deck.DeckTemplateNo.prototype.setDeckTemplateNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.TemplateNumbers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.TemplateNumbers.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.TemplateNumbers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.TemplateNumbers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.TemplateNumbers.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateNumbersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.TemplateNumbers}
 */
proto.deck.TemplateNumbers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.TemplateNumbers;
  return proto.deck.TemplateNumbers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.TemplateNumbers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.TemplateNumbers}
 */
proto.deck.TemplateNumbers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTemplateNumbers(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.TemplateNumbers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.TemplateNumbers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.TemplateNumbers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.TemplateNumbers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateNumbersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 template_numbers = 1;
 * @return {!Array<number>}
 */
proto.deck.TemplateNumbers.prototype.getTemplateNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.TemplateNumbers} returns this
 */
proto.deck.TemplateNumbers.prototype.setTemplateNumbersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.TemplateNumbers} returns this
 */
proto.deck.TemplateNumbers.prototype.addTemplateNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.TemplateNumbers} returns this
 */
proto.deck.TemplateNumbers.prototype.clearTemplateNumbersList = function() {
  return this.setTemplateNumbersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.DeckNumbers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckNumbers.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckNumbers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckNumbers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckNumbers.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckNumbersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    cupId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckNumbers}
 */
proto.deck.DeckNumbers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckNumbers;
  return proto.deck.DeckNumbers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckNumbers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckNumbers}
 */
proto.deck.DeckNumbers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDeckNumbers(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckNumbers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckNumbers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckNumbers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckNumbers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckNumbersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated int32 deck_numbers = 1;
 * @return {!Array<number>}
 */
proto.deck.DeckNumbers.prototype.getDeckNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.DeckNumbers} returns this
 */
proto.deck.DeckNumbers.prototype.setDeckNumbersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.DeckNumbers} returns this
 */
proto.deck.DeckNumbers.prototype.addDeckNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.DeckNumbers} returns this
 */
proto.deck.DeckNumbers.prototype.clearDeckNumbersList = function() {
  return this.setDeckNumbersList([]);
};


/**
 * optional uint32 cup_id = 2;
 * @return {number}
 */
proto.deck.DeckNumbers.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckNumbers} returns this
 */
proto.deck.DeckNumbers.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.UidCup.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.UidCup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.UidCup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.UidCup.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cupId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.UidCup}
 */
proto.deck.UidCup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.UidCup;
  return proto.deck.UidCup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.UidCup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.UidCup}
 */
proto.deck.UidCup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.UidCup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.UidCup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.UidCup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.UidCup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 uid = 1;
 * @return {number}
 */
proto.deck.UidCup.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.UidCup} returns this
 */
proto.deck.UidCup.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 cup_id = 2;
 * @return {number}
 */
proto.deck.UidCup.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.UidCup} returns this
 */
proto.deck.UidCup.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.deck.UidsCup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.UidsCup.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.UidsCup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.UidsCup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.UidsCup.toObject = function(includeInstance, msg) {
  var f, obj = {
    uidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    cupId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.UidsCup}
 */
proto.deck.UidsCup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.UidsCup;
  return proto.deck.UidsCup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.UidsCup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.UidsCup}
 */
proto.deck.UidsCup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUids(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.UidsCup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.UidsCup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.UidsCup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.UidsCup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getCupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated uint32 uids = 1;
 * @return {!Array<number>}
 */
proto.deck.UidsCup.prototype.getUidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.deck.UidsCup} returns this
 */
proto.deck.UidsCup.prototype.setUidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.deck.UidsCup} returns this
 */
proto.deck.UidsCup.prototype.addUids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.deck.UidsCup} returns this
 */
proto.deck.UidsCup.prototype.clearUidsList = function() {
  return this.setUidsList([]);
};


/**
 * optional uint32 cup_id = 2;
 * @return {number}
 */
proto.deck.UidsCup.prototype.getCupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.UidsCup} returns this
 */
proto.deck.UidsCup.prototype.setCupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.DeckNo.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.DeckNo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.DeckNo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckNo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckNo: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.DeckNo}
 */
proto.deck.DeckNo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.DeckNo;
  return proto.deck.DeckNo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.DeckNo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.DeckNo}
 */
proto.deck.DeckNo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeckNo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.DeckNo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.DeckNo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.DeckNo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.DeckNo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deck_no = 1;
 * @return {number}
 */
proto.deck.DeckNo.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.deck.DeckNo} returns this
 */
proto.deck.DeckNo.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.deck.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.deck.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.deck.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.deck.Empty}
 */
proto.deck.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.deck.Empty;
  return proto.deck.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.deck.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.deck.Empty}
 */
proto.deck.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.deck.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.deck.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.deck.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.deck.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.deck.DeckTemplateType = {
  NOTYPE: 0,
  DUEL_DECK_TEMPLATE: 1,
  QUEST_DECK_TEMPLATE: 2
};

/**
 * @enum {number}
 */
proto.deck.DeckType = {
  QUEST: 0,
  CUP: 1,
  NINE: 2
};

goog.object.extend(exports, proto.deck);
